const axios = require('axios');

// üîí Seu bot do Telegram
const TELEGRAM_TOKEN = '8147876704:AAE9WXFiyCTgmGWAfgbASc_dR6Pk7qSOpps';
const TELEGRAM_CHANNEL_ID = '@botgeniobac'; // ou -100XXXXXXXX se for privado

// üîÅ Hist√≥rico de √∫ltimas 10 cores (mock, substitua por leitura real futuramente)
let historico = ["üî¥", "üî¥", "‚ö´", "‚ö´", "üü†", "‚ö´", "üî¥", "üü†", "üü†", "üü†"];

// üìå Estrat√©gias simples de exemplo
function detectarPadrao(historico) {
  const ultimos = historico.slice(-3).join('');

  if (ultimos === 'üü†üü†üü†') {
    return { padrao: 'Trinca de Empates', cor: 'üî¥ ou ‚ö´', proteger: false };
  }

  if (ultimos === 'üî¥‚ö´üî¥') {
    return { padrao: 'Altern√¢ncia Cl√°ssica', cor: '‚ö´', proteger: true };
  }

  if (historico.slice(-2).every(c => c === 'üî¥')) {
    return { padrao: '2 Vermelhas Seguidas', cor: '‚ö´', proteger: true };
  }

  return null;
}

// üîî Envia mensagem para o Telegram
async function enviarAlerta(padrao, cor, protegerEmpate = true) {
  const mensagem = `
üíé RF Dados Premium - BacBo Estrat√©gia Autom√°tica üé≤
üìà Padr√£o detectado: *${padrao}*

üí∞ Entrar na cor: *${cor}*
${protegerEmpate ? "üî∂ Proteger o Empate" : ""}

üéØ Fa√ßa at√© G1 | Jogue com gest√£o

üëâ [Entrar agora na mesa BacBo](https://m.esportesdasorte.bet.br/ptb/games/livecasino/detail/18280/evol_BacBo00000000001_BRL)
  `;

  try {
    await axios.post(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
      chat_id: TELEGRAM_CHANNEL_ID,
      text: mensagem,
      parse_mode: "Markdown"
    });
    console.log("‚úÖ Alerta autom√°tico enviado para BacBo!");
  } catch (err) {
    console.error("‚ùå Erro ao enviar alerta:", err.message);
  }
}

// üîÅ Loop a cada 30s (voc√™ pode ajustar para leitura real depois)
setInterval(() => {
  const resultado = detectarPadrao(historico);
  if (resultado) {
    enviarAlerta(resultado.padrao, resultado.cor, resultado.proteger);
  } else {
    console.log("üïí Nenhum padr√£o detectado.");
  }

  // üß™ Simula nova jogada (substituir por leitura real futura)
  const cores = ["üî¥", "‚ö´", "üü†"];
  const novaCor = cores[Math.floor(Math.random() * cores.length)];
  historico.push(novaCor);
  if (historico.length > 20) historico.shift();

}, 30000); // ‚è±Ô∏è a cada 30 segundos
